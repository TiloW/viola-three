(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Item;

module.exports = Item = (function() {
  Item.HEIGHT = 30;

  Item.WIDTH = 100;

  function Item(options) {
    this.scene = options.scene;
    this.geometry = new THREE.BoxGeometry(Item.WIDTH, Item.HEIGHT, Item.WIDTH);
    this.texture = THREE.ImageUtils.loadTexture('textures/crate.gif');
    this.texture.anisotropy = 4;
    this.material = new THREE.MeshBasicMaterial({
      map: this.texture
    });
    this.mesh = new THREE.Mesh(this.geometry, this.material);
    this.mesh.position = options.position;
    this.scene.add(this.mesh);
  }

  return Item;

})();


},{}],2:[function(require,module,exports){
var Item, Stack;

Item = require('./Item.coffee');

module.exports = Stack = (function() {
  Stack.HEIGHT = 10;

  function Stack(options) {
    this.items = [];
    this.scene = options.scene;
    this.maxItems = options.maxItems;
    this.geometry = new THREE.BoxGeometry(Item.WIDTH, Stack.HEIGHT, Item.WIDTH);
    this.texture = THREE.ImageUtils.loadTexture('textures/stack.gif');
    this.texture.anisotropy = 4;
    this.material = new THREE.MeshBasicMaterial({
      map: this.texture
    });
    this.mesh = new THREE.Mesh(this.geometry, this.material);
    this.mesh.position = options.position;
    this.scene.add(this.mesh);
  }

  Stack.prototype.addItem = function(item, callback) {
    var itemCounter, pos, stackIsFull;
    itemCounter = this.items.length;
    stackIsFull = itemCounter >= this.maxItems;
    if (!stackIsFull) {
      pos = {
        x: this.mesh.position.x,
        y: this.getTopPosY(),
        z: this.mesh.position.z
      };
      if (item != null) {
        item.mesh.position = pos;
      }
      if (item == null) {
        item = new Item({
          scene: this.scene,
          position: pos
        });
      }
      this.items.push(item);
    }
    if (typeof callback === "function") {
      callback();
    }
    return !stackIsFull;
  };

  Stack.prototype.unload = function(callback) {
    var animate, item;
    item = this._getTopItem();
    if (item) {
      setTimeout(((function(_this) {
        return function() {
          return _this._removeItem(item, callback);
        };
      })(this)), 2000);
      this.items = this.items.slice(0, -1);
      animate = function() {
        if (item.mesh.position) {
          requestAnimationFrame(animate);
        }
        return item.mesh.position.y += Item.HEIGHT / 10;
      };
      animate();
    }
    return item != null;
  };

  Stack.prototype.relocateTo = function(otherStack, callback) {
    var MOVE_SIZE, animate, canRelocate, item, needsLiftingUp, needsLowering, needsShiftingX, needsShiftingZ;
    item = this._getTopItem();
    canRelocate = !this.isEmpty() && (otherStack != null) && !otherStack.isFull() && otherStack !== this;
    if (canRelocate) {
      MOVE_SIZE = Item.HEIGHT / 10;
      needsLiftingUp = true;
      needsShiftingX = true;
      needsShiftingZ = true;
      needsLowering = true;
      animate = (function(_this) {
        return function() {
          if (needsLowering) {
            requestAnimationFrame(animate);
          } else {
            _this.items = _this.items.slice(0, -1);
            otherStack.addItem(item);
            if (typeof callback === "function") {
              callback();
            }
          }
          needsLiftingUp &= item.mesh.position.y < (_this.maxItems + 2) * Item.HEIGHT;
          if (needsLiftingUp) {
            item.mesh.position.y += MOVE_SIZE;
          }
          if (!needsLiftingUp) {
            needsShiftingX &= Math.abs(item.mesh.position.x - otherStack.mesh.position.x) > MOVE_SIZE;
            needsShiftingZ &= Math.abs(item.mesh.position.z - otherStack.mesh.position.z) > MOVE_SIZE;
            if (needsShiftingX) {
              item.mesh.position.x += Item.HEIGHT / 10 * (otherStack.mesh.position.x > item.mesh.position.x ? 1 : -1);
            }
            if (needsShiftingZ) {
              item.mesh.position.z += Item.HEIGHT / 10 * (otherStack.mesh.position.z > item.mesh.position.z ? 1 : -1);
            }
            if (!(needsShiftingX || needsShiftingZ)) {
              item.mesh.position.x = (item.mesh.position.x + otherStack.mesh.position.x) / 2;
              item.mesh.position.z = (item.mesh.position.z + otherStack.mesh.position.z) / 2;
              needsLowering &= item.mesh.position.y - otherStack.getTopPosY() > MOVE_SIZE;
              return item.mesh.position.y -= MOVE_SIZE;
            }
          }
        };
      })(this);
      animate();
    }
    if (!canRelocate) {
      if (typeof callback === "function") {
        callback();
      }
    }
    return canRelocate;
  };

  Stack.prototype.isFull = function() {
    return this.items.length === this.maxItems;
  };

  Stack.prototype.isEmpty = function() {
    return this.items.length === 0;
  };

  Stack.prototype.getTopPosY = function() {
    return this.mesh.position.y + Stack.HEIGHT / 2 + (this.items.length + .5) * Item.HEIGHT;
  };

  Stack.prototype._getTopItem = function() {
    return this.items.slice(-1)[0];
  };

  Stack.prototype._removeItem = function(item, callback) {
    this.scene.remove(item.mesh);
    return typeof callback === "function" ? callback() : void 0;
  };

  return Stack;

})();


},{"./Item.coffee":1}],3:[function(require,module,exports){
var Stack, Storehouse;

Stack = require('./Stack.coffee');

module.exports = Storehouse = (function() {
  function Storehouse(options) {
    this.maxItems = options.maxItems;
    this.stacks = [];
    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(this.renderer.domElement);
    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000);
    this.camera.position.z = 400;
    this.controls = new THREE.OrbitControls(this.camera);
    this.controls.movementSpeed = 200;
    this.controls.lookSpeed = .25;
    this.scene = new THREE.Scene();
    this.clock = new THREE.Clock();
    this.initStacks(options.items);
    window.addEventListener('resize', ((function(_this) {
      return function() {
        return _this.resize();
      };
    })(this)), false);
    this.resize();
    this.render();
  }

  Storehouse.prototype.resize = function() {
    this.camera.aspect = window.innerWidth / window.innerHeight;
    this.camera.updateProjectionMatrix();
    return this.renderer.setSize(window.innerWidth, window.innerHeight);
  };

  Storehouse.prototype.render = function() {
    requestAnimationFrame((function(_this) {
      return function() {
        return _this.render();
      };
    })(this));
    this.renderer.render(this.scene, this.camera);
    return this.controls.update(this.clock.getDelta());
  };

  Storehouse.prototype.initStacks = function(initialItems) {
    var numberOfItems, _i, _len, _results;
    this.size = Math.ceil(Math.sqrt(initialItems.length));
    _results = [];
    for (_i = 0, _len = initialItems.length; _i < _len; _i++) {
      numberOfItems = initialItems[_i];
      _results.push(this.addStack(numberOfItems));
    }
    return _results;
  };

  Storehouse.prototype.addStack = function(numberOfItems) {
    var i, pos, stackCounter, _results;
    if (numberOfItems == null) {
      numberOfItems = 0;
    }
    stackCounter = this.stacks.length;
    pos = {
      x: Math.floor(stackCounter / this.size) * 120,
      y: 0,
      z: Math.floor(stackCounter % this.size) * 120
    };
    this.stacks.push(new Stack({
      scene: this.scene,
      position: pos,
      maxItems: this.maxItems
    }));
    i = 0;
    _results = [];
    while (i++ < numberOfItems) {
      _results.push(this.addItem(stackCounter));
    }
    return _results;
  };

  Storehouse.prototype.addItem = function(stackId) {
    if (this.stacks[stackId] != null) {
      return this._lock() && this.stacks[stackId].addItem(null, (function(_this) {
        return function() {
          return _this._unlock();
        };
      })(this));
    }
  };

  Storehouse.prototype.relocate = function(originStackId, targetStackId) {
    if (this.stacks[originStackId] != null) {
      return this._lock() && this.stacks[originStackId].relocateTo(this.stacks[targetStackId], (function(_this) {
        return function() {
          return _this._unlock();
        };
      })(this));
    }
  };

  Storehouse.prototype.unload = function(stackId) {
    if (this.stacks[stackId] != null) {
      return this._lock() && this.stacks[stackId].unload((function(_this) {
        return function() {
          return _this._unlock();
        };
      })(this));
    }
  };

  Storehouse.prototype._lock = function() {
    var result;
    result = !this.locked;
    this.locked = true;
    return result;
  };

  Storehouse.prototype._unlock = function() {
    return this.locked = false;
  };

  return Storehouse;

})();


},{"./Stack.coffee":2}],4:[function(require,module,exports){
var Storehouse;

Storehouse = require('./Storehouse.coffee');

window.onload = function() {
  return document.storehouse = new Storehouse({
    items: [6, 7, 4, 5, 2, 1, 4, 0],
    maxItems: 7
  });
};


},{"./Storehouse.coffee":3}]},{},[4])
//# sourceMappingURL=data:application/json;base64,
;