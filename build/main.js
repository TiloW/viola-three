(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Item;

module.exports = Item = (function() {
  Item.HEIGHT = 30;

  Item.WIDTH = 100;

  function Item(options) {
    var bitmap, img;
    img = new Image;
    if (!options.name) {
      console.warn('No name provided for item!');
    }
    if (options.name == null) {
      options.name = '#';
    }
    this.scene = options.scene;
    this.geometry = new THREE.BoxGeometry(Item.WIDTH, Item.HEIGHT, Item.WIDTH);
    bitmap = document.createElement('canvas');
    img.onload = (function(_this) {
      return function() {
        var g, textureSize, tmp;
        g = bitmap.getContext('2d');
        textureSize = Math.min(img.width, img.height);
        bitmap.width = img.width;
        bitmap.height = img.height;
        g.font = 'Bold ' + textureSize / 1.5 + 'px Helvetica';
        g.drawImage(img, 0, 0);
        g.textAlign = 'center';
        g.textBaseline = 'middle';
        g.strokeStyle = 'black';
        g.lineWidth = textureSize / 20;
        tmp = textureSize / 2;
        g.strokeText(options.name, tmp, tmp);
        g.fillStyle = 'white';
        g.fillText(options.name, tmp, tmp);
        return _this.texture.needsUpdate = true;
      };
    })(this);
    img.src = 'textures/crate.gif';
    this.texture = new THREE.Texture(bitmap);
    this.texture.anisotropy = 4;
    this.material = new THREE.MeshBasicMaterial({
      map: this.texture
    });
    this.mesh = new THREE.Mesh(this.geometry, this.material);
    this.mesh.position = options.position;
    this.scene.add(this.mesh);
  }

  return Item;

})();


},{}],2:[function(require,module,exports){
var Item, Stack;

Item = require('./Item.coffee');

module.exports = Stack = (function() {
  Stack.HEIGHT = 10;

  function Stack(options) {
    this.items = [];
    this.scene = options.scene;
    this.maxItems = options.maxItems;
    this.geometry = new THREE.BoxGeometry(Item.WIDTH, Stack.HEIGHT, Item.WIDTH);
    this.texture = THREE.ImageUtils.loadTexture('textures/stack.gif');
    this.texture.anisotropy = 4;
    this.material = new THREE.MeshBasicMaterial({
      map: this.texture
    });
    this.mesh = new THREE.Mesh(this.geometry, this.material);
    this.mesh.position = options.position;
    this.scene.add(this.mesh);
  }

  Stack.prototype.addItem = function(item, callback) {
    var itemCounter, pos, stackIsFull;
    itemCounter = this.items.length;
    stackIsFull = itemCounter >= this.maxItems;
    if (!stackIsFull) {
      pos = {
        x: this.mesh.position.x,
        y: this.getTopPosY(),
        z: this.mesh.position.z
      };
      item.mesh.position = pos;
      this.items.push(item);
    }
    if (typeof callback === "function") {
      callback();
    }
    return !stackIsFull;
  };

  Stack.prototype.unload = function(callback) {
    var animate, clock, item;
    item = this._getTopItem();
    if (item) {
      this.items = this.items.slice(0, -1);
      clock = new THREE.Clock();
      animate = (function(_this) {
        return function() {
          if (item.mesh.position.y < _this.mesh.position.y + (_this.maxItems + 1) * Item.HEIGHT) {
            requestAnimationFrame(animate);
            return item.mesh.position.y += Item.HEIGHT * 2 * clock.getDelta();
          } else {
            return setTimeout((function() {
              return _this._removeItem(item, callback);
            }), 1000);
          }
        };
      })(this);
      animate();
      clock.start();
    }
    return item != null;
  };

  Stack.prototype.relocateTo = function(otherStack, callback) {
    var animate, canRelocate, clock, item, needsLiftingUp, needsLowering, needsShiftingX, needsShiftingZ;
    item = this._getTopItem();
    canRelocate = !this.isEmpty() && (otherStack != null) && !otherStack.isFull() && otherStack !== this;
    if (canRelocate) {
      needsLiftingUp = true;
      needsShiftingX = true;
      needsShiftingZ = true;
      needsLowering = true;
      clock = new THREE.Clock();
      animate = (function(_this) {
        return function() {
          var moveSize;
          moveSize = Item.HEIGHT * 2 * clock.getDelta();
          if (needsLowering) {
            requestAnimationFrame(animate);
          } else {
            _this.items = _this.items.slice(0, -1);
            otherStack.addItem(item);
            if (typeof callback === "function") {
              callback();
            }
          }
          needsLiftingUp &= item.mesh.position.y < (_this.maxItems + 2) * Item.HEIGHT;
          if (needsLiftingUp) {
            item.mesh.position.y += moveSize;
          }
          if (!needsLiftingUp) {
            needsShiftingX &= Math.abs(item.mesh.position.x - otherStack.mesh.position.x) > moveSize;
            needsShiftingZ &= Math.abs(item.mesh.position.z - otherStack.mesh.position.z) > moveSize;
            if (needsShiftingX) {
              item.mesh.position.x += moveSize * (otherStack.mesh.position.x > item.mesh.position.x ? 1 : -1);
            }
            if (needsShiftingZ) {
              item.mesh.position.z += moveSize * (otherStack.mesh.position.z > item.mesh.position.z ? 1 : -1);
            }
            if (!(needsShiftingX || needsShiftingZ)) {
              item.mesh.position.x = (item.mesh.position.x + otherStack.mesh.position.x) / 2;
              item.mesh.position.z = (item.mesh.position.z + otherStack.mesh.position.z) / 2;
              needsLowering &= item.mesh.position.y - otherStack.getTopPosY() > moveSize;
              return item.mesh.position.y -= moveSize;
            }
          }
        };
      })(this);
      animate();
      clock.start();
    }
    if (!canRelocate) {
      if (typeof callback === "function") {
        callback();
      }
    }
    return canRelocate;
  };

  Stack.prototype.isFull = function() {
    return this.items.length === this.maxItems;
  };

  Stack.prototype.isEmpty = function() {
    return this.items.length === 0;
  };

  Stack.prototype.getTopPosY = function() {
    return this.mesh.position.y + Stack.HEIGHT / 2 + (this.items.length + .5) * Item.HEIGHT;
  };

  Stack.prototype._getTopItem = function() {
    return this.items.slice(-1)[0];
  };

  Stack.prototype._removeItem = function(item, callback) {
    this.scene.remove(item.mesh);
    return typeof callback === "function" ? callback() : void 0;
  };

  return Stack;

})();


},{"./Item.coffee":1}],3:[function(require,module,exports){
var Item, Stack, Storehouse;

Stack = require('./Stack.coffee');

Item = require('./Item.coffee');

module.exports = Storehouse = (function() {
  function Storehouse(options) {
    this.promised = [];
    this.maxItems = options.maxItems;
    this.stacks = [];
    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(this.renderer.domElement);
    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000);
    this.controls = new THREE.OrbitControls(this.camera);
    this.controls.movementSpeed = 200;
    this.controls.lookSpeed = .25;
    this.scene = new THREE.Scene();
    this.initStacks(options.items);
    window.addEventListener('resize', ((function(_this) {
      return function() {
        return _this.resize();
      };
    })(this)), false);
    this.resize();
    this.render();
  }

  Storehouse.prototype.resize = function() {
    this.camera.aspect = window.innerWidth / window.innerHeight;
    this.camera.updateProjectionMatrix();
    return this.renderer.setSize(window.innerWidth, window.innerHeight);
  };

  Storehouse.prototype.render = function() {
    requestAnimationFrame((function(_this) {
      return function() {
        return _this.render();
      };
    })(this));
    this.renderer.render(this.scene, this.camera);
    return this.controls.update();
  };

  Storehouse.prototype.initStacks = function(stacks) {
    var items, tmp, _i, _len, _results;
    this.size = Math.ceil(Math.sqrt(stacks.length));
    tmp = this.size * Item.WIDTH;
    this.camera.position.x = tmp;
    this.camera.position.z = tmp;
    this.camera.position.y = this.maxItems * 2 * Item.HEIGHT;
    _results = [];
    for (_i = 0, _len = stacks.length; _i < _len; _i++) {
      items = stacks[_i];
      _results.push(this.addStack(items));
    }
    return _results;
  };

  Storehouse.prototype.addStack = function(items) {
    var i, itemName, pos, stackCounter, _i, _len, _results;
    if (items == null) {
      items = [];
    }
    stackCounter = this.stacks.length;
    pos = {
      x: Math.floor(stackCounter / this.size) * 120,
      y: 0,
      z: Math.floor(stackCounter % this.size) * 120
    };
    this.stacks.push(new Stack({
      scene: this.scene,
      position: pos,
      maxItems: this.maxItems
    }));
    i = 0;
    _results = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      itemName = items[_i];
      _results.push(this.addItem(stackCounter, itemName));
    }
    return _results;
  };

  Storehouse.prototype.addItem = function(stackId, itemName) {
    if (this.stacks[stackId] != null) {
      return this._lock() && this.stacks[stackId].addItem(new Item({
        scene: this.scene,
        name: itemName
      }), (function(_this) {
        return function() {
          return _this._unlock();
        };
      })(this));
    }
  };

  Storehouse.prototype.relocate = function(originStackId, targetStackId, callback) {
    var result;
    if (callback == null) {
      callback = function() {};
    }
    result = false;
    if ((this.stacks[originStackId] != null) && this._lock()) {
      result = this.stacks[originStackId].relocateTo(this.stacks[targetStackId], (function(_this) {
        return function() {
          _this._unlock();
          return callback();
        };
      })(this));
      if (!result) {
        this._unlock();
      }
    }
    return result;
  };

  Storehouse.prototype.unload = function(stackId, callback) {
    var result;
    if (callback == null) {
      callback = function() {};
    }
    result = false;
    if ((this.stacks[stackId] != null) && this._lock()) {
      result = this.stacks[stackId].unload((function(_this) {
        return function() {
          _this._unlock();
          return callback();
        };
      })(this));
      if (!result) {
        this._unlock();
      }
    }
    return result;
  };

  Storehouse.prototype.promiseTo = function() {
    var promised, self;
    promised = this.promised;
    self = this;
    return {
      relocate: function(originStackId, targetStackId) {
        promised.push(function() {
          return self.relocate(originStackId, targetStackId);
        });
        if (!self.locked) {
          self._unlock();
        }
        return this;
      },
      unload: function(stackId) {
        promised.push(function() {
          return self.unload(stackId);
        });
        if (!self.locked) {
          self._unlock();
        }
        return this;
      }
    };
  };

  Storehouse.prototype._lock = function() {
    var result;
    result = !this.locked;
    this.locked = true;
    return result;
  };

  Storehouse.prototype._unlock = function() {
    this.locked = false;
    if (this.promised.length > 0) {
      return this.promised.shift().call();
    }
  };

  return Storehouse;

})();


},{"./Item.coffee":1,"./Stack.coffee":2}],4:[function(require,module,exports){
var Storehouse;

Storehouse = require('./Storehouse.coffee');

window.onload = function() {
  document.storehouse = new Storehouse({
    maxItems: 4,
    items: [[6, 3, 1, 4], [2, 5, 7, 8], []]
  });
  return setTimeout((function() {
    return document.storehouse.promiseTo().relocate(1, 2).relocate(1, 2).relocate(1, 2).relocate(0, 2).unload(0).unload(1).unload(0).unload(2).unload(2).unload(0).unload(2).unload(2);
  }), 2000);
};


},{"./Storehouse.coffee":3}]},{},[4])
//# sourceMappingURL=data:application/json;base64,
;